---
import { Image } from "astro:assets";

import logo from "@images/Logo_Game25_New_Colors.svg";

const navItems = [
  { title: "Tournois", button: false, href: "#tournois" },
  { title: "Sponsors", button: false, href: "#sponsors" },
  { title: "Infos pratiques", button: false, href: "#" },
  {
    title: "Ã€ propos de nous",
    button: false,
    href: "https://magellan.fpms.ac.be",
  },
  { title: "S'incrire", button: true, href: "/inscription" },
];
---

<header class="sticky top-0 z-20 bg-indigo-950 font-semibold text-white">
  <nav class="mx-auto flex justify-between gap-4 px-4 py-2 lg:container">
    <a href="/" class="duration-150 hover:opacity-80">
      <Image
        class="w-24"
        src={logo}
        alt="Game 25"
        quality={30}
        format="webp"
      /><span class="sr-only">GAME 25</span>
    </a>
    <ul class="hidden flex-wrap justify-between gap-8 lg:flex">
      {
        navItems.map((navItem) => (
          <li class="mx-auto flex items-center justify-center">
            {navItem.button ? (
              <a
                class="rounded-lg bg-gradient-to-r from-amber-500 to-orange-500 px-4 py-2 text-white transition duration-150 hover:bg-blue-50 hover:text-indigo-950"
                href={navItem.href}
              >
                {navItem.title}
              </a>
            ) : (
              <a
                class="relative from-amber-500 to-orange-500 px-1 py-1 after:absolute after:bottom-0 after:left-0 after:z-50 after:h-[3px] after:w-0 after:rounded-full after:bg-gradient-to-r after:duration-500 hover:after:w-full"
                href={navItem.href}
              >
                {navItem.title}
              </a>
            )}
          </li>
        ))
      }
    </ul>
    <button id="menu-toggle" class="focus:outline-none lg:hidden">
      <svg
        class="h-8 w-8"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="3"
          d="M4 6h16M4 12h16m-7 6h7"></path>
      </svg>
    </button>
  </nav>
  <div
    id="mobile-menu"
    data-visible="false"
    class="shadow-box fixed bottom-0 right-0 top-0 hidden bg-indigo-950 bg-opacity-95 backdrop-blur-sm lg:hidden"
  >
    <div class="flex justify-end px-4 py-7">
      <button id="menu-close" class="my-1">
        <svg
          class="h-8 w-8"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="3"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>
    <ul class="flex h-full flex-col gap-4 p-8 pr-12">
      {
        navItems.map((navItem) => (
          <li class="flex flex-col space-y-4">
            <div class="inline-flex">
              {navItem.button ? (
                <a
                  class="rounded-lg bg-gradient-to-r from-amber-500 to-orange-500 px-4 py-2 text-white transition duration-150 hover:bg-blue-50 hover:text-indigo-950"
                  href={navItem.href}
                >
                  {navItem.title}
                </a>
              ) : (
                <a
                  class="relative from-amber-500 to-orange-500 px-1 py-1 after:absolute after:bottom-0 after:left-0 after:z-50 after:h-[3px] after:w-0 after:rounded-full after:bg-gradient-to-r after:duration-500 hover:after:w-full"
                  href={navItem.href}
                >
                  {navItem.title}
                </a>
              )}
            </div>
          </li>
        ))
      }
    </ul>
  </div>
</header>
<script>
  document.addEventListener("click", function (event) {
    const mobileMenu = document.getElementById("mobile-menu");
    const menuToggle = document.getElementById("menu-toggle");
    const menuClose = document.getElementById("menu-close");
    if (event.target instanceof Node) {
      if (menuToggle?.contains(event.target)) {
        mobileMenu?.classList.remove("hidden");
        mobileMenu?.setAttribute("data-visible", "true");
      } else if (
        menuClose?.contains(event.target) ||
        (!mobileMenu?.contains(event.target) &&
          mobileMenu?.getAttribute("data-visible") === "true")
      ) {
        mobileMenu?.classList.add("hidden");
        mobileMenu?.setAttribute("data-visible", "false");
      }
    }
  });
</script>
